document.addEventListener('DOMContentLoaded', () => {
    const taskInput = document.getElementById('new-task-input');
    const addTaskBtn = document.getElementById('add-task-btn');
    const todoList = document.getElementById('todo-list');

    // Load tasks from localStorage
    function loadTasks() {
        const tasks = JSON.parse(localStorage.getItem('tasks')) || [];
        tasks.forEach(taskText => {
            addTaskElement(taskText);
        });
    }

    // Save tasks to localStorage
    function saveTasks() {
        const tasks = [];
        todoList.querySelectorAll('li').forEach(item => {
            tasks.push(item.textContent);
        });
        localStorage.setItem('tasks', JSON.stringify(tasks));
    }

    // Add a new task element to the list
    function addTaskElement(taskText) {
        if (taskText.trim() === '') return;

        const li = document.createElement('li');
        li.textContent = taskText;

        // Add a delete button to each task
        const deleteBtn = document.createElement('button');
        deleteBtn.textContent = 'x';
        deleteBtn.classList.add('delete-btn');
        deleteBtn.style.cssText = 'background-color: transparent; color: #bdbbbb; border: none; font-size: 1.2em; cursor: pointer;';

        deleteBtn.addEventListener('click', () => {
            li.remove();
            saveTasks();
        });

        li.appendChild(deleteBtn);
        todoList.appendChild(li);
    }

    // Event listener for the add button
    addTaskBtn.addEventListener('click', () => {
        const taskText = taskInput.value;
        addTaskElement(taskText);
        saveTasks();
        taskInput.value = ''; // Clear the input field
    });

    // Event listener for the Enter key
    taskInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            addTaskBtn.click();
        }
    });

    loadTasks();


    // --- Random Quote Generator ---
    const quoteDisplay = document.getElementById('random-quote');
    const authorDisplay = document.getElementById('quote-author');

    function fetchAndDisplayQuote() {
        // in quotes there are the quotes which are generated by a template I implemented in Chatgpt
        fetch('static/data/quotes.json')
            .then(response => response.json())
            .then(quotes => {
                const randomIndex = Math.floor(Math.random() * quotes.length);
                const randomQuote = quotes[randomIndex];
                quoteDisplay.textContent = `"${randomQuote.quote}"`;
                authorDisplay.textContent = `- ${randomQuote.author}`;
            })
            .catch(error => {
                console.error('Error fetching quotes:', error);
                quoteDisplay.textContent = "Could not load a quote.";
            });
    }

    // Call the function when the page loads
    fetchAndDisplayQuote();
});
